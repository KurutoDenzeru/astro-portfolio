---
import { ClientRouter } from "astro:transitions";
import { SITE } from "@consts";

interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = "/sitemap.webp" } = Astro.props;
import CookieConsent from "./CookieConsent.astro";
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta
  name="viewport"
  content="width=device-width, initial-scale=1.0, maximum-scale=5.0"
/>
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />
<meta name="author" content={SITE.AUTHOR} />
<meta name="publisher" content={SITE.TITLE} />
<meta name="application-name" content={SITE.TITLE} />

<!-- Theme Color -->
<meta name="theme-color" content="#ffffff" media="(prefers-color-scheme: light)" />
<meta name="theme-color" content="#000000" media="(prefers-color-scheme: dark)" />

<meta
  name="google-site-verification"
  content="m3sLJi9VBShvEmo-gVNP0apehtbdvYqOuOFh8mPoFsk"
/>

<link
  rel="preload"
  href="/fonts/atkinson-regular.woff"
  as="font"
  type="font/woff"
  crossorigin="anonymous"
/>
<link
  rel="preload"
  href="/fonts/atkinson-bold.woff"
  as="font"
  type="font/woff"
  crossorigin="anonymous"
/>

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:site_name" content="Kurt Calacday" />
<meta property="og:locale" content="en_US" />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- Sitemap -->
<link rel="sitemap" href="/sitemap-index.xml" />

<!-- RSS Feed -->
<link
  rel="alternate"
  type="application/rss+xml"
  title={title}
  href={`${Astro.site}rss.xml`}
/>

<!-- Global Scripts (now modules) -->
<script type="module" src="/js/theme.js"></script>
<script type="module" src="/js/scroll.js"></script>
<script type="module" src="/js/animate.js"></script>

<!-- Cloudflare Web Analytics -->
<!-- b57650f711ec4244813b03101859b932 -->

<!-- Analytics are loaded only after explicit user consent via the CookieConsent component -->


<script is:inline type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "Person",
    "name": "{SITE.AUTHOR}",
    "url": "{Astro.site}",
    "sameAs": [
      "https://github.com/KurutoDenzeru",
      "https://www.linkedin.com/in/kurtcalacday/"
    ],
    "jobTitle": "Software Engineer",
    "worksFor": {
      "@type": "Organization",
      "name": "{SITE.TITLE}"
    }
  }
</script>

<script is:inline type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "WebSite",
    "name": "{SITE.TITLE}",
    "url": "{Astro.site}",
    "potentialAction": {
      "@type": "SearchAction",
      "target": "{Astro.site}search?q={search_term_string}",
      "query-input": "required name=search_term_string"
    }
  }
</script>

<ClientRouter />
<CookieConsent client:load />
<script>
  import type { TransitionBeforeSwapEvent } from "astro:transitions/client";
  document.addEventListener("astro:before-swap", (e) =>
    [
      ...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll(
        'link[as="font"]',
      ),
    ].forEach((link) => link.remove()),
  );
</script>

<!-- Vercel Web Analytics verification (production only) -->
<script is:inline>
  (function(){
    try {
      const site = typeof location !== 'undefined' ? location.origin : '';
      if (!site || !site.includes('kurtcalacday.vercel.app')) return;

      function checkVercel() {
        try {
          // Common globals added by analytics libs
          if (window.__VERCEL_INSIGHTS__ || window.__vercel_analytics || window.__vitals) {
            console.log('Vercel Web Analytics detected on this page');
            return true;
          }

          // Look for script tags referencing vercel/insights/vitals
          const found = Array.from(document.scripts).some(s => {
            if (!s.src) return false;
            const url = s.src.toLowerCase();
            return url.includes('vercel') || url.includes('vercel-insights') || url.includes('vitals') || url.includes('vercel-analytics');
          });
          if (found) {
            console.log('Vercel Web Analytics script found in DOM');
            return true;
          }

          // As a last resort, check for recent network activity to common Vercel endpoints (best-effort, non-blocking)
          // Note: we cannot read cross-origin requests, but we can observe if navigator.sendBeacon was used by wrapping it earlier.
          console.warn('Vercel Web Analytics not detected. If you expect analytics, verify deployment settings (analytics enabled in Vercel, correct site).');
          return false;
        } catch (e) { console.warn('Error checking Vercel analytics', e); return false }
      }

      // run check after load (to allow asynchronously inserted scripts)
      if (document.readyState === 'complete') setTimeout(checkVercel, 800); else window.addEventListener('load', function(){ setTimeout(checkVercel, 800) });
    } catch (e) { /* noop */ }
  })();
</script>
