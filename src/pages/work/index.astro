---
import { WORK } from "@consts";
import { getCollection } from "astro:content";
import BottomLayout from "@layouts/BottomLayout.astro";
import PageLayout from "@layouts/PageLayout.astro";
import TopLayout from "@layouts/TopLayout.astro";
import { Image } from "astro:assets";

const collection = await getCollection("work");

collection.sort(
  (a, b) =>
    new Date(b.data.dateStart).getTime() - new Date(a.data.dateStart).getTime(),
);

type RenderedEntry = (typeof work)[number] | (typeof orgs)[number];

// Function to group entries by company
function groupByCompany(entries: RenderedEntry[]) {
  const groups: { [key: string]: RenderedEntry[] } = {};
  for (const entry of entries) {
    if (!groups[entry.data.company]) {
      groups[entry.data.company] = [];
    }
    groups[entry.data.company].push(entry);
  }

  // Sort positions within each company by date
  for (const group of Object.values(groups)) {
    group.sort(
      (
        a: { data: { dateStart: string | number | Date } },
        b: { data: { dateStart: string | number | Date } },
      ) =>
        new Date(b.data.dateStart).getTime() -
        new Date(a.data.dateStart).getTime(),
    );
  }

  return groups;
}

// Filter collections based on type
const workCollection = collection.filter((item) => item.data.type === "work");
const orgsCollection = collection.filter((item) => item.data.type === "org");

const work = await Promise.all(
  workCollection.map(async (item) => {
    const { Content } = await item.render();
    return { ...item, Content };
  }),
);

const orgs = await Promise.all(
  orgsCollection.map(async (item) => {
    const { Content } = await item.render();
    return { ...item, Content };
  }),
);

const groupedWork = groupByCompany(work);
const groupedOrgs = groupByCompany(orgs);

function formatWorkDate(input: Date | string) {
  // If input is a string, try to parse it. Allow "Present" to pass through.
  if (typeof input === "string") {
    const trimmed = input.trim();
    if (/^present$/i.test(trimmed)) return "Present";
    const parsed = new Date(trimmed);
    if (!isNaN(parsed.getTime())) input = parsed;
    else return trimmed; // fallback to raw string if it can't be parsed
  }

  // Use full month names now (January, February, ...)
  const month = input.toLocaleDateString("en-US", {
    month: "long",
  });

  const year = new Date(input).getFullYear();
  return `${month} ${year}`;
}

function calculateDuration(
  startDate: string | Date,
  endDate: string | Date | undefined,
) {
  if (!startDate) return "";
  const start = new Date(startDate as any);
  const isPresent = !endDate || endDate === "Present" || endDate === "present";
  const end = isPresent ? new Date() : new Date(endDate as any);

  // if invalid dates, return empty
  if (isNaN(start.getTime()) || isNaN(end.getTime())) return "";

  // Compute months difference using only year and month (ignore day).
  // Use inclusive counting so e.g. June -> August = 3 months (Jun, Jul, Aug)
  const startYear = start.getFullYear();
  const startMonth = start.getMonth(); // 0-based
  const endYear = end.getFullYear();
  const endMonth = end.getMonth();

  let months = (endYear - startYear) * 12 + (endMonth - startMonth) + 1;
  if (months < 0) months = 0;

  const years = Math.floor(months / 12);
  const remainingMonths = months % 12;

  const parts: string[] = [];
  if (years > 0) parts.push(`${years} yr${years !== 1 ? "s" : ""}`);
  if (remainingMonths > 0)
    parts.push(`${remainingMonths} mo${remainingMonths !== 1 ? "s" : ""}`);

  if (parts.length === 0) return isPresent ? "Less than a month" : "0 mos";
  return parts.join(" ");
}
---

<PageLayout title={WORK.TITLE} description={WORK.DESCRIPTION}>
  <TopLayout>
    <div class="animate page-heading text-2xl">
      {WORK.TITLE}
    </div>
  </TopLayout>

  <!-- Work Experience -->
  <BottomLayout>
    <ul class="space-y-4">
      {
        Object.entries(groupedWork).map(([company, entries], index) => (
          <li class="animate">
            <div
              class={`border-b border-black/10 dark:border-white/25 ${index === Object.keys(groupedWork).length - 1 ? "border-b-0" : ""}`}
            >
              <div class="flex items-start gap-4">
                {entries[0].data.companyImage && (
                  <Image
                    src={entries[0].data.companyImage}
                    alt={company}
                    width="60"
                    height="60"
                    class="rounded-md"
                  />
                )}
                <div class="flex-1">
                  <div class="text-black dark:text-white font-semibold text-lg">
                    {company}
                  </div>
                  <div class="mt-1">
                    {entries.length > 1 ? (
                      <ol class="relative border-s border-gray-200 dark:border-gray-700">
                        {entries.map((entry) => (
                          <li class="ms-4 mb-4">
                            <div class="absolute w-3 h-3 bg-gray-200 rounded-full mt-1.5 -start-1.5 border border-white dark:border-gray-900 dark:bg-gray-700" />
														<div class="text-black dark:text-white font-semibold">
															{entry.data.role}
														</div>
                            <div class="text-sm text-gray-600 dark:text-gray-400">
                              {formatWorkDate(entry.data.dateStart)} —{" "}
                              {formatWorkDate(entry.data.dateEnd)}
                              {" \u00B7 "}
                              {calculateDuration(
                                entry.data.dateStart,
                                entry.data.dateEnd,
                              )}
                            </div>
                            {/* Render Content as a component */}
                            <article class="work-content text-sm mt-2">
                              <entry.Content />
                            </article>
                          </li>
                        ))}
                      </ol>
                    ) : (
                      entries.map((entry) => (
                        <div class="relative">
                          <div>
                            <div class="flex items-center gap-2">
                              <div class="text-black dark:text-white font-semibold">
                                {entry.data.role}
                              </div>
                            </div>

                            <div class="text-sm text-gray-600 dark:text-gray-400">
                              {formatWorkDate(entry.data.dateStart)} —{" "}
                              {formatWorkDate(entry.data.dateEnd)} {" \u00B7 "}
                              {calculateDuration(
                                entry.data.dateStart,
                                entry.data.dateEnd,
                              )}
                            </div>

                            {/* Render Content as a component */}
                            <article class="work-content text-sm mt-2">
                              <entry.Content />
                            </article>
                          </div>
                        </div>
                      ))
                    )}
                  </div>
                </div>
              </div>
            </div>
          </li>
        ))
      }
    </ul>
  </BottomLayout>

  <!-- Organization Affiliations -->
  <BottomLayout>
    <div class="animate page-heading text-2xl">Organization Affiliations</div>
  </BottomLayout>

  <BottomLayout>
    <ul class="space-y-4">
      {
        Object.entries(groupedOrgs).map(([company, entries], index) => (
          <li class="animate">
            <div
              class={`border-b border-black/10 dark:border-white/25 pb-8 ${index === Object.keys(groupedOrgs).length - 1 ? "border-b-0" : ""}`}
            >
              <div class="flex items-start gap-4">
								{entries[0].data.companyImage && (
									<Image
										src={entries[0].data.companyImage}
										alt={company}
										width="60"
										height="60"
										class="rounded-md"
									/>
								)}
                <div class="flex-1">
                  <div class="text-black dark:text-white font-semibold text-lg">
                    {company}
                  </div>
                  <div class="mt-1">
                    {entries.length > 1 ? (
                      <ol class="relative border-s border-gray-200 dark:border-gray-700">
                        {entries.map((entry) => (
                          <li class="mb-10 ms-4">
                            <div class="absolute w-3 h-3 bg-gray-200 rounded-full mt-1.5 -start-1.5 border border-white dark:border-gray-900 dark:bg-gray-700" />
                            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                              {entry.data.role}
                            </h3>
                            <div class="text-sm text-gray-600 dark:text-gray-400">
                              {formatWorkDate(entry.data.dateStart)} —{" "}
                              {formatWorkDate(entry.data.dateEnd)}
                              {" \u00B7 "}
                              {calculateDuration(
                                entry.data.dateStart,
                                entry.data.dateEnd,
                              )}
                            </div>
                            {/* Render Content as a component */}
                            <article class="work-content text-sm mt-2">
                              <entry.Content />
                            </article>
                          </li>
                        ))}
                      </ol>
                    ) : (
                      entries.map((entry) => (
                        <div class="relative">
                          <div>
                            <div class="text-black dark:text-white font-semibold">
                              {entry.data.role}
                            </div>
                            <div class="text-sm text-gray-600 dark:text-gray-400">
                              {formatWorkDate(entry.data.dateStart)} —{" "}
                              {formatWorkDate(entry.data.dateEnd)}
                            </div>
                            {/* Render Content as a component */}
                            <div class="work-content text-sm mt-2">
                              <entry.Content />
                            </div>
                          </div>
                        </div>
                      ))
                    )}
                  </div>
                </div>
              </div>
            </div>
          </li>
        ))
      }
    </ul>
  </BottomLayout>
</PageLayout>
