---
// filepath: /Users/kurtcalacday/Documents/Projects/astro-app/src/components/Header.astro
import Container from "@components/Container.astro";
import { LINKS, SITE } from "@consts";
import { cn } from "@lib/utils";
import { Button } from "@/components/ui/button";

const { pathname } = Astro.url;
const subpath = pathname.match(/[^/]+/g);

// lucide astro icons (server-rendered components, not raw <svg> tags)
import { Rss, Moon, Sun, X, Search, Menu } from "lucide-react";
---

<header id="header" class="fixed top-0 w-full h-16 z-50">
  <Container size="lg">
    <div class="relative h-full w-full">
      <!-- Brand / Home -->
      <div
        class="absolute left-0 top-1/2 -translate-y-1/2 flex gap-1 font-semibold"
      >
        <a
          href="/"
          class="flex gap-1 text-current hover:text-black dark:hover:text-white transition-colors duration-300 ease-in-out"
        >
            <picture class="size-10">
              <!-- Show black favicon in light mode, white favicon in dark mode -->
              <img
                src="/brand_black.svg"
                alt={`${SITE.TITLE} logo`}
                class="w-auto h-auto p-1 block dark:hidden"
                loading="lazy"
              />
              <img
                src="/brand_white.svg"
                alt={`${SITE.TITLE} logo`}
                class="w-auto h-auto p-1 hidden dark:block"
                loading="lazy"
              />
            </picture>
          <div class="my-auto">{SITE.TITLE}</div>
        </a>
      </div>

      <!-- Center nav -->
      <div class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2">
        <nav class="hidden md:flex items-center justify-center text-sm gap-4">
          {
            LINKS.map((LINK: { HREF: string; TEXT: string }) => (
              <a
                href={LINK.HREF}
                class={cn(
                  "h-8 rounded-lg px-3 text-current",
                  "flex items-center justify-center",
                  "transition-colors duration-300 ease-in-out",
                  pathname === LINK.HREF || "/" + subpath?.[0] === LINK.HREF
                    ? "bg-black dark:bg-white text-white dark:text-black"
                    : "hover:bg-black/5 dark:hover:bg-white/20 hover:text-black dark:hover:text-white",
                )}
              >
                {LINK.TEXT}
              </a>
            ))
          }
        </nav>
      </div>

      <!-- Actions -->
      <div class="buttons absolute right-0 top-1/2 -translate-y-1/2 flex gap-4">
        <a
          href="/search"
          aria-label={`Search on ${SITE.TITLE}`}
          class={cn(
            "hidden md:flex",
            "size-9 rounded-lg p-2 items-center justify-center",
            "bg-transparent hover:bg-black/5 dark:hover:bg-white/20",
            "stroke-current hover:stroke-black hover:dark:stroke-white",
            "border border-black/10 dark:border-white/25",
            "transition-colors duration-300 ease-in-out",
            pathname === "/search" || "/" + subpath?.[0] === "/search"
              ? "pointer-events-none bg-black dark:bg-white text-white dark:text-black"
              : "",
          )}
        >
          <Search className="text-gray-900 dark:text-white w-full h-full" />
        </a>

        <a
          href="/rss.xml"
          target="_blank"
          rel="noopener"
          aria-label={`Rss feed for ${SITE.TITLE}`}
          class={cn(
            "hidden md:flex",
            "size-9 rounded-lg p-2 items-center justify-center",
            "bg-transparent hover:bg-black/5 dark:hover:bg-white/20",
            "stroke-current hover:stroke-black hover:dark:stroke-white",
            "border border-black/10 dark:border-white/25",
            "transition-colors duration-300 ease-in-out",
          )}
        >
          <Rss className="text-gray-900 dark:text-white w-full h-full" />
        </a>

        <Button
          id="header-theme-button"
          aria-label="Toggle light and dark theme"
          className={cn(
            "hidden md:flex",
            "size-9 rounded-lg p-2 items-center justify-center",
            "bg-transparent hover:bg-black/5 dark:hover:bg-white/20",
            "stroke-current hover:stroke-black hover:dark:stroke-white",
            "border border-black/10 dark:border-white/25",
            "transition-colors duration-300 ease-in-out",
            "cursor-pointer",
          )}
        >
          <Sun className="block dark:hidden text-gray-900" />
          <Moon className="hidden dark:block dark:text-white" />
        </Button>

        <Button
          id="header-drawer-button"
          aria-label="Toggle drawer open and closed"
          className={cn(
            "flex md:hidden",
            "size-9 rounded-lg p-2 items-center justify-center",
            "bg-transparent hover:bg-black/5 dark:hover:bg-white/20",
            "stroke-current hover:stroke-black hover:dark:stroke-white",
            "border border-black/10 dark:border-white/25",
            "transition-colors duration-300 ease-in-out",
          )}
        >
          <Menu id="drawer-open" className="text-gray-900 dark:text-white" />
          <X
            id="drawer-close"
            className="hidden dark:block text-gray-900 dark:text-white"
          />
        </Button>
      </div>
    </div>
  </Container>
</header>

<style>
  #header-drawer-button > #drawer-open {
    @apply block;
  }
  #header-drawer-button > #drawer-close {
    @apply hidden;
  }
  #header-drawer-button.open > #drawer-open {
    @apply hidden;
  }
  #header-drawer-button.open > #drawer-close {
    @apply block;
  }
</style>

<script is:inline>
  function toggleDrawer() {
    const drawer = document.getElementById("drawer");
    const drawerButton = document.getElementById("header-drawer-button");
    drawer?.classList.toggle("open");
    drawerButton?.classList.toggle("open");
  }

  function initializeDrawerButton() {
    const drawerButton = document.getElementById("header-drawer-button");
    drawerButton?.addEventListener("click", toggleDrawer);
  }

  document.addEventListener("astro:after-swap", initializeDrawerButton);
  initializeDrawerButton();
</script>
